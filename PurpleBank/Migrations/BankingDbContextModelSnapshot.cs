// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PurpleBank.Data;

#nullable disable

namespace PurpleBank.Migrations
{
    [DbContext(typeof(BankingDbContext))]
    partial class BankingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PurpleBank.Models.BankingAccountV2", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccountOwnership")
                        .HasColumnType("int");

                    b.Property<string>("CreationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOwned")
                        .HasColumnType("bit");

                    b.Property<string>("MaskedNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpenStatus")
                        .HasColumnType("int");

                    b.Property<int>("ProductCategory")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.ToTable("BankingAccount", (string)null);

                    b.HasData(
                        new
                        {
                            AccountId = "1",
                            AccountOwnership = 0,
                            DisplayName = "Account 1",
                            IsOwned = true,
                            MaskedNumber = "****1234",
                            OpenStatus = 1,
                            ProductCategory = 0,
                            ProductName = "Savings Account"
                        },
                        new
                        {
                            AccountId = "2",
                            AccountOwnership = 0,
                            DisplayName = "Account 2",
                            IsOwned = true,
                            MaskedNumber = "****5678",
                            OpenStatus = 1,
                            ProductCategory = 0,
                            ProductName = "Checking Account"
                        },
                        new
                        {
                            AccountId = "3",
                            AccountOwnership = 0,
                            DisplayName = "Account 3",
                            IsOwned = false,
                            MaskedNumber = "****9101",
                            OpenStatus = 1,
                            ProductCategory = 0,
                            ProductName = "Checking Account"
                        },
                        new
                        {
                            AccountId = "4",
                            AccountOwnership = 0,
                            DisplayName = "Account 4",
                            IsOwned = false,
                            MaskedNumber = "****1121",
                            OpenStatus = 1,
                            ProductCategory = 0,
                            ProductName = "Checking Account"
                        },
                        new
                        {
                            AccountId = "5",
                            AccountOwnership = 0,
                            DisplayName = "Account 5",
                            IsOwned = true,
                            MaskedNumber = "****3141",
                            OpenStatus = 1,
                            ProductCategory = 0,
                            ProductName = "Checking Account"
                        });
                });

            modelBuilder.Entity("PurpleBank.Models.BankingTransaction", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApcaNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillerCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Crn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExecutionDateTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDetailAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("MerchantCategoryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostingDateTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("ValueDateTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionId");

                    b.ToTable("BankingTransaction", (string)null);

                    b.HasData(
                        new
                        {
                            TransactionId = "1",
                            AccountId = "1",
                            Amount = "100",
                            Description = "Deposit",
                            ExecutionDateTime = "23/04/2023 1:52:18 PM",
                            IsDetailAvailable = false,
                            Reference = "REF001",
                            Status = 1,
                            Type = 1
                        },
                        new
                        {
                            TransactionId = "2",
                            AccountId = "1",
                            Amount = "200",
                            Description = "Withdraw",
                            ExecutionDateTime = "24/04/2023 1:52:18 PM",
                            IsDetailAvailable = false,
                            Reference = "REF002",
                            Status = 1,
                            Type = 2
                        },
                        new
                        {
                            TransactionId = "3",
                            AccountId = "2",
                            Amount = "300",
                            Description = "Deposit",
                            ExecutionDateTime = "25/04/2023 1:52:18 PM",
                            IsDetailAvailable = false,
                            Reference = "REF003",
                            Status = 1,
                            Type = 5
                        },
                        new
                        {
                            TransactionId = "4",
                            AccountId = "2",
                            Amount = "400",
                            Description = "Withdraw",
                            ExecutionDateTime = "26/04/2023 1:52:18 PM",
                            IsDetailAvailable = false,
                            Reference = "REF004",
                            Status = 1,
                            Type = 6
                        },
                        new
                        {
                            TransactionId = "5",
                            AccountId = "3",
                            Amount = "500",
                            Description = "Deposit",
                            ExecutionDateTime = "27/04/2023 1:52:18 PM",
                            IsDetailAvailable = false,
                            Reference = "REF005",
                            Status = 1,
                            Type = 7
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
